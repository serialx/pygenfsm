[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pygenfsm"
version = "0.1.0"
description = "A minimal, clean, typed and synchronous FSM implementation inspired by Erlang's gen_fsm"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Your Name", email = "your.email@example.com" },
]
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
]
keywords = ["fsm", "finite-state-machine", "state-machine", "erlang", "gen_fsm"]

[project.urls]
Homepage = "https://github.com/yourusername/pygenfsm"
Repository = "https://github.com/yourusername/pygenfsm"
Issues = "https://github.com/yourusername/pygenfsm/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/pygenfsm"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pyright>=1.1.350",
    "ruff>=0.3.0",
    "pre-commit>=3.3.3",
]

[tool.ruff]
line-length = 88
target-version = "py38"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "N",    # pep8-naming
    "RUF",  # Ruff-specific rules
    "T20",  # flake8-print
    "D",    # pydocstyle
    "PL",   # Pylint
    "TRY",  # tryceratops
    "ERA",  # eradicate
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "T201",   # print found (ok in examples)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "ARG"]
"examples/*" = ["D", "T20", "ARG"]  # ARG: handler params are part of the API

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyright]
include = ["src", "tests", "examples"]
exclude = ["**/__pycache__"]
pythonVersion = "3.8"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportPrivateUsage = false
reportUnusedFunction = false  # Test functions are used by decorators

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
    "--strict-markers",
    "--cov=pygenfsm",
    "--cov-report=term-missing",
]